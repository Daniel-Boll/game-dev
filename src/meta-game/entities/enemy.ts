import * as w4 from "../wasm4";

import { Entity, EntityManager, EntityType } from "./manager";
import { Ball } from "./ball";
import { Player } from "./player";
import { Position } from "../../utils/structures";
import uuid from "../../3rd-party/assembly";

const manager = EntityManager.getInstance();

// demon_level1
const demon_level1Width = 16;
const demon_level1Height = 16;
const demon_level1Flags = 1; // BLIT_2BPP
const demon_level1 = memory.data<u8>([
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf3, 0xff, 0xf7,
  0xc5, 0x53, 0xdf, 0xf5, 0xf9, 0x6f, 0x5f, 0xf6, 0x74, 0x1d, 0x9f, 0xf6, 0xbd,
  0x7e, 0x9f, 0xf6, 0xd6, 0x97, 0x9f, 0xf7, 0x65, 0x59, 0xdf, 0xff, 0xb9, 0x6e,
  0xff, 0xff, 0x7e, 0xbd, 0xff, 0xff, 0xf5, 0x5f, 0xff, 0xff, 0xf6, 0x9f, 0xff,
  0xff, 0xd7, 0xd7, 0xff, 0xff, 0x5f, 0xf5, 0xff, 0xff, 0xff, 0xff, 0xff,
]);

// demon_level2
const demon_level2Width = 16;
const demon_level2Height = 16;
const demon_level2Flags = 1; // BLIT_2BPP
const demon_level2 = memory.data<u8>([
  0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfe, 0xff, 0xff, 0xaf, 0xfa, 0xff, 0xff,
  0xab, 0xea, 0xff, 0xf7, 0xeb, 0xeb, 0xdf, 0xf5, 0xf1, 0x4f, 0x5f, 0xf6, 0x79,
  0x6d, 0x9f, 0xf6, 0xa0, 0x0a, 0x9f, 0xf6, 0x98, 0x26, 0x9f, 0xf6, 0x56, 0x95,
  0x9f, 0xf6, 0x65, 0x59, 0x9f, 0xf6, 0x79, 0x69, 0x9f, 0xff, 0xde, 0xb7, 0xff,
  0xff, 0xf6, 0x9f, 0xff, 0xff, 0xf7, 0xdf, 0xff, 0xff, 0xef, 0xfb, 0xff,
]);

// demon_level3
const demon_level3Width = 32;
const demon_level3Height = 32;
const demon_level3Flags = 1; // BLIT_2BPP
const demon_level3 = memory.data<u8>([
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfe,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xef, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbb, 0xed, 0x7b, 0xee, 0xfd,
  0xff, 0xff, 0x7f, 0xeb, 0xf5, 0x5f, 0xeb, 0xfd, 0xff, 0xfd, 0x7f, 0xaf, 0xe9,
  0x6b, 0xea, 0xfd, 0x7f, 0xfd, 0x7f, 0xaf, 0xd2, 0x87, 0xfa, 0xfd, 0x7f, 0xfd,
  0x7f, 0xab, 0xe5, 0x5b, 0xea, 0xfd, 0x7f, 0xf5, 0x5e, 0xaa, 0xe9, 0x6b, 0xab,
  0xf5, 0x5f, 0xf5, 0x53, 0xff, 0xfa, 0xaf, 0xff, 0xd5, 0x5f, 0xf6, 0x5a, 0xff,
  0xaa, 0xaa, 0xd8, 0xa6, 0x5f, 0xd6, 0x62, 0x89, 0x6a, 0xa9, 0x62, 0xaa, 0x57,
  0xd6, 0xaa, 0x25, 0x5a, 0xa5, 0x59, 0xaa, 0x57, 0xd6, 0xa0, 0x89, 0x55, 0x55,
  0x62, 0x2a, 0x97, 0xda, 0x82, 0x29, 0x55, 0x55, 0x68, 0x82, 0x97, 0xda, 0x09,
  0x8a, 0x56, 0x95, 0xa2, 0x60, 0x97, 0xd8, 0x26, 0x62, 0xa9, 0x6a, 0x89, 0x98,
  0x17, 0xd0, 0x99, 0x98, 0x95, 0x56, 0x26, 0x66, 0x07, 0xd0, 0x96, 0x68, 0xaa,
  0xaa, 0x25, 0x96, 0x07, 0xd0, 0x66, 0x60, 0xaa, 0xaa, 0x29, 0x9a, 0x07, 0xd8,
  0x2a, 0xa0, 0xaa, 0xaa, 0xca, 0xa8, 0x17, 0xda, 0x08, 0x80, 0x5a, 0xa5, 0xf2,
  0x20, 0x97, 0xf6, 0x80, 0x01, 0x56, 0x95, 0x7c, 0x02, 0x5f, 0xf5, 0xa0, 0x05,
  0x6a, 0xa9, 0x5c, 0x0a, 0x5f, 0xfd, 0xaa, 0xb5, 0xaf, 0xfa, 0x5d, 0xa9, 0x7f,
  0xfd, 0x99, 0xfa, 0xbf, 0xfe, 0xaf, 0x69, 0x7f, 0xff, 0x57, 0xfe, 0xbf, 0xfe,
  0xbf, 0xd9, 0xff, 0xff, 0x5f, 0xfe, 0xaf, 0xfa, 0xff, 0xf5, 0xff, 0xff, 0xdf,
  0xff, 0xef, 0xfb, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xef, 0xfb, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xaf, 0xfa, 0xff, 0xff, 0xff,
]);

let frameCount = 0;
export class Enemy extends Entity {
  private position: Position<i32> = new Position<i32>();
  private size: u8 = 8;
  private score: u8 = 0;
  private once: bool = false;
  private howManyBallsToSpawn: i32 = 1;
  private dispatch: i32 = 0;
  private level: i32 = 0;
  private chancePerLevel: i32[] = [85, 80, 60, 50, 40];
  private trasholdPerLevel: i32[] = [2, 2, 3, 3, 3];

  public setPosition(x: i32, y: i32): Enemy {
    this.position.x = x;
    this.position.y = y;

    return this;
  }

  public teleportTo(x: i32): void {
    this.position.x = x;
  }

  public getScore(): u8 {
    return this.score;
  }

  public increaseScore(): Enemy {
    this.score++;
    return this;
  }

  public setLevel(level: i32): Enemy {
    this.level = level;
    return this;
  }

  public releaseMoreBalls(): Enemy {
    // How many balls are there
    const balls: Array<Entity> = manager.getEntities(EntityType.Ball);

    if (balls.length < this.trasholdPerLevel[this.level]) {
      this.howManyBallsToSpawn++;
      const chance: f32 = <f32>this.chancePerLevel[this.level] / 100;
      const random = Math.random();

      if (<f32>random >= chance) this.howManyBallsToSpawn++;
    }

    return this;
  }

  public update(): Enemy {
    frameCount++;
    this.dispatch++;
    const player: Player = <Player>manager.getEntity(EntityType.Player);

    if (this.dispatch == 50) {
      if (this.howManyBallsToSpawn > 0 && !player.isPlayerInSpecial()) {
        (
          manager.addEntity(EntityType.Ball).addTag(uuid()).create() as Ball
        ).spawn(<i16>this.position.x, <i16>this.position.y);
        this.howManyBallsToSpawn--;
      }

      this.dispatch = 0;
    }

    return this;
  }

  public draw(): Enemy {
    if (this.level == 0 || this.level == 1) {
      store<u16>(w4.DRAW_COLORS, 0x1234);
      w4.blit(
        demon_level1,
        this.position.x - demon_level1Width / 2,
        this.position.y - demon_level1Height / 2,
        demon_level1Width,
        demon_level1Height,
        demon_level1Flags
      );
    } else if (this.level == 2 || this.level == 3) {
      store<u16>(w4.DRAW_COLORS, 0x1234);
      w4.blit(
        demon_level2,
        this.position.x - demon_level2Width / 2,
        this.position.y - demon_level2Height / 2,
        demon_level2Width,
        demon_level2Height,
        demon_level2Flags
      );
    } else if (this.level == 4) {
      store<u16>(w4.DRAW_COLORS, 0x1234);
      w4.blit(
        demon_level3,
        this.position.x - demon_level3Width / 2,
        this.position.y - demon_level3Height / 2,
        demon_level3Width,
        demon_level3Height,
        demon_level3Flags
      );
    }

    return this;
  }
}
